apply plugin: "com.android.application"
import com.android.build.OutputFile


buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        // The Fabric Gradle plugin uses an open ended version to react
        // quickly to Android tooling updates
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'io.fabric'
repositories {
    maven { url 'https://maven.fabric.io/public' }
}


/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"]
 * ]
 */

apply from: "react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "com.dancedeets.android"
        minSdkVersion 16
        targetSdkVersion 22
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        multiDexEnabled true
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    signingConfigs {
        release {
            storeFile file(DANCEDEETS_RELEASE_STORE_FILE)
            storePassword DANCEDEETS_RELEASE_STORE_PASSWORD
            keyAlias DANCEDEETS_RELEASE_KEY_ALIAS
            keyPassword DANCEDEETS_RELEASE_KEY_PASSWORD
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            shrinkResources true
            zipAlignEnabled true
            manifestPlaceholders = [applicationIdSuffix: ""]
            signingConfig signingConfigs.release
            buildConfigField "String", "CODEPUSH_KEY", "\"mlhZmPNl3bsc0vfKbtsW3ELJljc94kVrpLamW\""
        }
        debug {
            applicationIdSuffix ".debug"
            manifestPlaceholders = [applicationIdSuffix: ".debug"]
            signingConfig signingConfigs.release
            buildConfigField "String", "CODEPUSH_KEY", "\"lphPzOk4ErUZC-AjGTDS4Gokb5wJ4kVrpLamW\""
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

configurations.all {
    // React-Native-Compile:
    // exclude group: 'com.facebook.react', module: 'react-native'
    resolutionStrategy {
        force 'com.google.android.gms:play-services-ads:9.6.0+'
        force 'com.google.android.gms:play-services-base:9.6.0+'
        force 'com.google.android.gms:play-services-location:9.6.0+'
        force 'com.google.android.gms:play-services-maps:9.6.0+'
        force 'com.google.android.gms:play-services-gcm:9.6.0+'
        force 'com.google.firebase:firebase-core:9.6.0+'
        force 'com.google.firebase:firebase-config:9.6.0+'
        force 'com.google.firebase:firebase-auth:9.6.0+'
        force 'com.google.firebase:firebase-analytics:9.6.0+'
        force 'com.google.firebase:firebase-database:9.6.0+'
        force 'com.google.firebase:firebase-storage:9.6.0+'
        force 'com.google.firebase:firebase-messaging:9.6.0+'
    }
}

dependencies {
    compile project(':react-native-firestack')
    compile project(':react-native-youtube')
    compile project(':react-native-google-api-availability')
    compile project(':react-native-push-notification')
    compile project(':react-native-photo-view')
    compile project(':react-native-permissions')
    compile project(':react-native-firebase3')
    compile project(':react-native-native-env')
    compile project(':react-native-locale')
    compile project(':react-native-code-push')
    compile project(':react-native-share')
    compile project(':react-native-mail')
    compile project(':react-native-admob')
    compile project(':react-native-mixpanel')
    compile project(':react-native-fabric')
    compile project(':react-native-fbsdk')
    compile project(':react-native-geocoder')
    compile project(':react-native-linear-gradient')
    compile project(':react-native-maps')
    compile project(':react-native-segmented-android')
    compile project(':RNSendIntentModule')
    //compile "com.mixpanel.android:mixpanel-android:4.+"
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.facebook.android:facebook-android-sdk:4.+'
    compile('com.crashlytics.sdk.android:crashlytics:2.+@aar') {
        transitive = true;
    }

    // React-Native-Compile:
    // compile project(':ReactAndroid')
    // React-Native-Compile:
    compile 'com.facebook.react:react-native:+' // from node_modules

    compile 'com.google.firebase:firebase-core:9.4.0+'
    compile 'com.google.firebase:firebase-config:9.4.0+'
    // The excludes above and includes below are due to version incompatibilities
    // between 8.4 and 9.0 libraries.
    // https://github.com/lelandrichardson/react-native-maps/issues/249
    compile 'com.google.android.gms:play-services-base:9.4.0+'
    compile 'com.google.android.gms:play-services-ads:9.4.0+'
    compile 'com.google.android.gms:play-services-maps:9.4.0+'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
  from configurations.compile
  into 'libs'
}

apply plugin: 'com.google.gms.google-services'
